/**
 * Performs in O(N^2)
 **/
const topSkus = (k, skus) => {
  if (!Array.isArray(skus)) return [];
  if (typeof k !== 'number') return undefined;

  let freq = {},
      result = [],
      arr = [];

  for (var i = 0; i < skus.length; i++) {
    freq[skus[i]] = freq[skus[i]] ? freq[skus[i]] +1 : 1;
  }

  arr = Object.entries(freq).sort( (x,y) => y[1] - x[1] );

  for (var i = 0; i < k; i++) {
    result.push( parseInt(arr[i][0]) );
  }

  return result;
}

const topQtd = 2;
const skuList = [6,6,6,6,6,6,6,6,6,1,1,1,2,2,2,2,2,2,2,2,2,3,4,5,5,5,5,5,5,55,
  5,5,5,5,5,5,5,5,5,5,5,5,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
  32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
  32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
  22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
  22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
  22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
  13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
  33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
  6,6,6,6,6,6,6,6,6,1,1,1,2,2,2,2,2,2,2,2,2,3,4,5,5,5,5,5,5,55,
    5,5,5,5,5,5,5,5,5,5,5,5,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
    32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
    22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
    22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
    22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
    13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,
    33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
    33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
    33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
    33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
    33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,
    33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33];

console.time('topSkus')
const result = topSkus(topQtd, skuList);
console.log('topSkus: ', result);
console.timeEnd('topSkus');
console.assert(result.length === topQtd, 'topSkus - Quantity of skus differ from expected.');
console.assert(result[0] === 5, 'topSkus - First result is wrong.');
console.assert(result[1] === 2, 'topSkus - Second result is wrog');


/**
 * Performs in O(N) or O(N + k)
 **/
const topSkusON = (k, skus) => {
  if (!Array.isArray(skus)) return [];
  if (typeof k !== 'number') return undefined;

  let freq = {},
      result = Array(k).fill(0),
      keys = Array(k);

  for (var i = 0; i < skus.length; i++) {
    freq[skus[i]] = freq[skus[i]] ? freq[skus[i]] +1 : 1;

    for (var j = 0; j < result.length; j++) {
      if(result[j] < freq[skus[i]]) {
        result[j] = freq[skus[i]];
        keys[j] = skus[i];
        break;
      }
    }
  }

  return keys;
}

console.time('topSkusON');
const result2 = topSkusON(topQtd, skuList);
console.log('topSkusON: ', result2);
console.timeEnd('topSkusON');
console.assert(result2.length === topQtd, 'topSkusOn - Quantity of skus differ from expected.');
console.assert(result2[0] === 5, 'topSkusOn - First result is wrong.');
console.assert(result2[1] === 2, 'topSkusOn - Second result is wrog');
